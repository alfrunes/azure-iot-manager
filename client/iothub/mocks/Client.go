// Copyright 2021 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	iothub "github.com/mendersoftware/azure-iot-manager/client/iothub"
	mock "github.com/stretchr/testify/mock"

	model "github.com/mendersoftware/azure-iot-manager/model"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetDeviceTwin provides a mock function with given fields: ctx, sas, id
func (_m *Client) GetDeviceTwin(ctx context.Context, sas *model.ConnectionString, id string) (*iothub.DeviceTwin, error) {
	ret := _m.Called(ctx, sas, id)

	var r0 *iothub.DeviceTwin
	if rf, ok := ret.Get(0).(func(context.Context, *model.ConnectionString, string) *iothub.DeviceTwin); ok {
		r0 = rf(ctx, sas, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iothub.DeviceTwin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ConnectionString, string) error); ok {
		r1 = rf(ctx, sas, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceTwins provides a mock function with given fields: ctx, sas
func (_m *Client) GetDeviceTwins(ctx context.Context, sas *model.ConnectionString) (iothub.Cursor, error) {
	ret := _m.Called(ctx, sas)

	var r0 iothub.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, *model.ConnectionString) iothub.Cursor); ok {
		r0 = rf(ctx, sas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iothub.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ConnectionString) error); ok {
		r1 = rf(ctx, sas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceTwin provides a mock function with given fields: ctx, sas, id, r
func (_m *Client) UpdateDeviceTwin(ctx context.Context, sas *model.ConnectionString, id string, r *iothub.DeviceTwinUpdate) error {
	ret := _m.Called(ctx, sas, id, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ConnectionString, string, *iothub.DeviceTwinUpdate) error); ok {
		r0 = rf(ctx, sas, id, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
