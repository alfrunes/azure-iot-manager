// Copyright 2021 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"

	workflows "github.com/mendersoftware/deviceconfig/client/workflows"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CheckHealth provides a mock function with given fields: ctx
func (_m *Client) CheckHealth(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployConfiguration provides a mock function with given fields: ctx, tenantID, deviceID, deploymentID, configuration, retries, updateControlMap
func (_m *Client) DeployConfiguration(ctx context.Context, tenantID string, deviceID string, deploymentID uuid.UUID, configuration []byte, retries uint, updateControlMap map[string]interface{}) error {
	ret := _m.Called(ctx, tenantID, deviceID, deploymentID, configuration, retries, updateControlMap)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uuid.UUID, []byte, uint, map[string]interface{}) error); ok {
		r0 = rf(ctx, tenantID, deviceID, deploymentID, configuration, retries, updateControlMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitAuditLog provides a mock function with given fields: ctx, log
func (_m *Client) SubmitAuditLog(ctx context.Context, log workflows.AuditLog) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workflows.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
